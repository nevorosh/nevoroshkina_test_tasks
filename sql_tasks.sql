-- creating and filling a table houses

CREATE TABLE IF NOT EXISTS houses(
    id SERIAL PRIMARY KEY,
    street_id INT,
    tenants INT,
    floors INT
);

INSERT INTO houses (street_id, tenants, floors) VALUES
(62, 136, 7),
(82, 241, 13),
(88, 365, 8),
(66, 406, 17),
(34, 856, 2),
(40, 881, 5),
(68, 146, 6),
(41, 126, 17),
(19, 703, 10),
(18, 373, 17),
(51, 776, 1),
(87, 314, 7),
(30, 211, 15),
(99, 968, 12),
(91, 134, 18),
(4, 573, 3),
(49, 309, 7),
(24, 706, 2),
(85, 391, 7),
(86, 83, 5),
(2, 88, 16),
(97, 807, 10),
(100, 736, 8),
(15, 331, 17),
(76, 692, 7),
(26, 202, 8),
(3, 830, 6),
(6, 309, 8),
(63, 441, 8),
(38, 729, 1),
(84, 640, 14),
(27, 660, 11),
(45, 332, 17),
(60, 561, 8),
(81, 764, 19),
(96, 452, 12),
(8, 515, 16),
(32, 511, 17),
(14, 554, 19),
(10, 903, 6),
(21, 596, 9),
(48, 321, 17),
(53, 600, 7),
(71, 930, 15),
(55, 433, 4),
(58, 261, 6),
(29, 707, 1),
(92, 797, 6),
(39, 256, 9),
(67, 751, 16),
(75, 871, 5),
(44, 668, 7),
(37, 232, 6),
(33, 398, 3),
(98, 121, 9),
(25, 162, 1),
(93, 892, 18),
(52, 177, 12),
(74, 982, 9),
(35, 799, 15),
(22, 278, 6),
(31, 476, 13),
(83, 135, 18),
(54, 604, 16),
(69, 607, 10),
(50, 608, 4),
(73, 919, 18),
(36, 229, 9),
(16, 124, 8),
(9, 961, 13),
(1, 326, 17),
(65, 262, 12),
(79, 491, 10),
(72, 453, 8),
(13, 223, 2),
(80, 395, 12),
(11, 773, 7),
(78, 685, 7),
(56, 982, 13),
(89, 344, 3),
(95, 490, 14),
(77, 913, 5),
(57, 324, 19),
(61, 633, 15),
(43, 413, 8),
(17, 782, 18),
(70, 326, 11),
(5, 591, 2),
(59, 116, 6),
(90, 321, 10),
(28, 674, 7),
(64, 129, 16),
(12, 835, 9),
(42, 667, 8),
(46, 465, 13),
(94, 766, 15),
(23, 172, 8),
(7, 542, 17),
(20, 626, 8),
(47, 200, 4);

-- creating and filling a table streets
CREATE TABLE IF NOT EXISTS streets(
    id SERIAL PRIMARY KEY,
	"name" varchar(50) NULL,
	length float4 NULL
);

INSERT INTO streets ("name", length) VALUES
('Hickory Avenue', 14.67),
('Cedar Terrace', 8.18),
('Birch Way', 13.15),
('Hickory Lane', 14.97),
('Ash Lane', 5.77),
('Ash Avenue', 9.65),
('Ash Boulevard', 1.81),
('Oak Parkway', 11.02),
('Ash Way', 5.71),
('Hickory Boulevard', 7.09),
('Oak Avenue', 12.01),
('Elm Road', 12.47),
('Hickory Street', 12.49),
('Birch Avenue', 11.3),
('Willow Boulevard', 6.66),
('Main Lane', 11.37),
('Ash Boulevard', 6.7),
('Oak Street', 4.62),
('Ash Avenue', 2.2),
('Main Drive', 10.13),
('Cedar Terrace', 6.8),
('Cedar Street', 7.71),
('Birch Way', 11.9),
('Oak Avenue', 5.09),
('Hickory Trail', 12.84),
('Willow Avenue', 8.12),
('Willow Road', 6.38),
('Oak Parkway', 14.09),
('Ash Street', 3.83),
('Birch Street', 14.14),
('Cedar Avenue', 5.19),
('Birch Terrace', 4.8),
('Hickory Way', 8.23),
('Ash Avenue', 10.71),
('Maple Lane', 6.63),
('Willow Lane', 11.72),
('Birch Boulevard', 13.35),
('Birch Parkway', 6.77),
('Cedar Boulevard', 2.3),
('Hickory Trail', 9.31),
('Hickory Trail', 13.29),
('Birch Terrace', 11.2),
('Pine Avenue', 5.06),
('Birch Boulevard', 2.26),
('Hickory Terrace', 4.66),
('Birch Terrace', 1.53),
('Willow Parkway', 5.95),
('Main Avenue', 12.15),
('Ash Drive', 8.76),
('Oak Lane', 4.45),
('Elm Avenue', 14.75),
('Elm Way', 11.87),
('Main Way', 8.77),
('Ash Avenue', 4.93),
('Maple Parkway', 9.05),
('Birch Boulevard', 14.3),
('Hickory Street', 11.26),
('Ash Drive', 3.28),
('Birch Way', 5.77),
('Elm Terrace', 1.92),
('Maple Avenue', 12.69),
('Ash Terrace', 4.31),
('Hickory Boulevard', 4.99),
('Cedar Lane', 14.72),
('Ash Avenue', 5.33),
('Main Boulevard', 14.19),
('Willow Road', 5.31),
('Pine Boulevard', 8.86),
('Oak Road', 6.81),
('Willow Terrace', 5.19),
('Willow Trail', 11.31),
('Birch Road', 0.79),
('Oak Terrace', 8.36),
('Main Drive', 1.22),
('Pine Terrace', 8.64),
('Maple Drive', 4.15),
('Pine Terrace', 3.71),
('Elm Avenue', 10.41),
('Willow Parkway', 11.32),
('Birch Drive', 4.1),
('Willow Road', 13.95),
('Main Parkway', 9.24),
('Willow Lane', 13.0),
('Birch Parkway', 8.69),
('Elm Avenue', 1.68),
('Willow Way', 2.5),
('Main Boulevard', 9.46),
('Oak Trail', 9.01),
('Pine Trail', 5.03),
('Cedar Drive', 6.65),
('Oak Trail', 4.29),
('Oak Lane', 10.18),
('Main Parkway', 10.2),
('Main Way', 7.61),
('Elm Avenue', 1.04),
('Willow Trail', 1.99),
('Maple Boulevard', 3.15),
('Willow Way', 10.48),
('Birch Street', 14.21),
('Pine Trail', 11.43);

-- creating and filling a table team_data
CREATE TABLE public.team_data (
	team varchar(50) NULL,
	developer varchar(50) NULL,
	task_count int4 NULL
);

INSERT INTO public.team_data (team, developer, task_count) VALUES
('Team_1', 'Dev_1', 11),
('Team_1', 'Dev_2', 24),
('Team_1', 'Dev_3', 3),
('Team_1', 'Dev_4', 6),
('Team_1', 'Dev_5', 41),
('Team_1', 'Dev_6', 38),
('Team_2', 'Dev_1', 19),
('Team_2', 'Dev_2', 10),
('Team_2', 'Dev_3', 10),
('Team_3', 'Dev_1', 45),
('Team_3', 'Dev_2', 32),
('Team_3', 'Dev_3', 13),
('Team_3', 'Dev_4', 11),
('Team_4', 'Dev_1', 35),
('Team_5', 'Dev_1', 23),
('Team_5', 'Dev_2', 43),
('Team_5', 'Dev_3', 38),
('Team_5', 'Dev_4', 34),
('Team_5', 'Dev_5', 23),
('Team_5', 'Dev_6', 11);


--Task 1
--Две таблицы
--streets
--id | name (наименование) | length (длина, км)
--houses
--id | street_id | tenants (кол-во жителей) | floors (этажность)
--Найти: среди улиц, где живёт менее 500 человек, найти 3 самые длинные

SELECT s.name
FROM streets s
JOIN houses h ON s.id = h.street_id
WHERE h.tenants < 500 
ORDER BY s.length DESC 
LIMIT 3;


--Task 2
--Есть таблица:
--team | develper | task_count
--Для каждой команды вывести по одному разработчику, у которого меньше всего задач. Решить через оконную функцию.

WITH ranked_developers AS (
    SELECT team, 
    developer,
    task_count,
    ROW_NUMBER() OVER (PARTITION BY team ORDER BY task_count ASC) AS num
    FROM team_data
)
SELECT team, 
    developer,
    task_count
FROM ranked_developers
WHERE num = 1;
